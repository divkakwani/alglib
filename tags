!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	test/Makefile	/^CC = g++$/;"	m
DataGenerator	test/data_generator.h	/^		DataGenerator() {$/;"	f	class:DataGenerator
DataGenerator	test/data_generator.h	/^class DataGenerator {$/;"	c
FLAGS	test/Makefile	/^FLAGS = -std=c++0x$/;"	m
Friendship	test/containers/graph_test.cpp	/^    Friendship(Person* p_1, Person* p_2) {$/;"	f	class:Friendship
Friendship	test/containers/graph_test.cpp	/^class Friendship : public Edge {$/;"	c	file:
Friendship	test/containers/new_graph_test.cpp	/^    Friendship(Person* p_1, Person* p_2) {$/;"	f	class:Friendship
Friendship	test/containers/new_graph_test.cpp	/^class Friendship : public Edge {$/;"	c	file:
G	src/algorithms/graph/shortest_path.cpp	/^		graph& G;$/;"	m	class:dijkstra_sssp	file:
Hasher	src/containers/graph/graph.h	/^  	struct Hasher {$/;"	s	class:graph
OrderStatisticTest	test/algorithms/test_order_statistic.cpp	/^		OrderStatisticTest(it_type (*fn)(it_type, it_type, int)) {$/;"	f	class:OrderStatisticTest
OrderStatisticTest	test/algorithms/test_order_statistic.cpp	/^class OrderStatisticTest : public Test {$/;"	c	file:
PRINT	test/algorithms/test_order_statistic.cpp	15;"	d	file:
Person	test/containers/graph_test.cpp	/^    Person(string nam) {$/;"	f	class:Person
Person	test/containers/graph_test.cpp	/^class Person : public Vertex {$/;"	c	file:
Person	test/containers/new_graph_test.cpp	/^    Person(string nam) {$/;"	f	class:Person
Person	test/containers/new_graph_test.cpp	/^class Person : public Vertex {$/;"	c	file:
SortTest	test/algorithms/test_sort.cpp	/^SortTest<Seq>::SortTest(void (*sort_routine)(it_type first, it_type last)) {$/;"	f	class:SortTest
SortTest	test/algorithms/test_sort.cpp	/^class SortTest : public Test {$/;"	c	file:
SortTimer	test/algorithms/timer_sort.cpp	/^SortTimer<Seq>::SortTimer(void (*sort_func)(typename Seq::iterator first, typename Seq::iterator last)) {$/;"	f	class:SortTimer
SortTimer	test/algorithms/timer_sort.cpp	/^class SortTimer {$/;"	c	file:
StrMatchingTest	test/algorithms/test_str_matching.cpp	/^StrMatchingTest::StrMatchingTest(size_t (*fn)(const string& text, const string& search)) {$/;"	f	class:StrMatchingTest
StrMatchingTest	test/algorithms/test_str_matching.cpp	/^class StrMatchingTest : public Test {$/;"	c	file:
Test	test/test.h	/^Test::Test() {$/;"	f	class:Test
Test	test/test.h	/^class Test {$/;"	c
Timer	test/timer.h	/^Timer::Timer() {$/;"	f	class:Timer
Timer	test/timer.h	/^class Timer {$/;"	c
_DATAGENERATOR_H	test/data_generator.h	4;"	d
_EDGE_H	src/containers/graph/edge.h	3;"	d
_GRAPH_ALGO_H	src/algorithms/graph/graph_algo.h	2;"	d
_GRAPH_H	src/containers/graph/graph.h	3;"	d
_GRAPH_H	src/containers/graph/undirected_graph.h	3;"	d
_GRAPH_SEARCH_H	src/algorithms/graph/search.h	3;"	d
_MST_H	src/algorithms/graph/mst.h	5;"	d
_ORDER_STATISTIC_H	src/algorithms/order_statistic.h	3;"	d
_PARALLEL_SORT_H	src/multithreaded_algorithm/parallel_sort.h	3;"	d
_STR_MATCHING_	src/algorithms/str_matching.h	2;"	d
_TIMER_H	test/timer.h	3;"	d
_UTILS_H	test/utils.h	4;"	d
_VERTEX_H	src/containers/graph/vertex.h	3;"	d
__SORT__H	src/algorithms/sort.h	17;"	d
add_edge	src/containers/graph/undirected_graph.h	/^void undirected_graph::add_edge(Edge* e) {$/;"	f	class:undirected_graph
add_vertex	src/containers/graph/undirected_graph.h	/^void undirected_graph::add_vertex(Vertex* v) {$/;"	f	class:undirected_graph
adjTo	src/containers/graph/undirected_graph.h	/^OutputIter undirected_graph::adjTo(Vertex* v, OutputIter dest) {$/;"	f	class:undirected_graph
adj_list	src/containers/graph/undirected_graph.h	/^    std::unordered_map<Vertex*, std::vector<Vertex*>, graph::Hasher> adj_list;$/;"	m	class:undirected_graph
assertPredicate	test/test.h	9;"	d
assert_	test/test.h	6;"	d
bfs_order	src/algorithms/graph/search.h	/^OutputIterator bfs_order(graph& G, OutputIterator dest) {$/;"	f
clk_cycles_at_start	test/timer.h	/^    clock_t clk_cycles_at_start;$/;"	m	class:Timer
clk_cycles_at_stop	test/timer.h	/^    clock_t clk_cycles_at_stop;$/;"	m	class:Timer
connected_components	src/algorithms/graph/graph_algo.h	/^OutputIter connected_components(UndirectedGraph& G, OutputIter dest) {$/;"	f
dfs	src/algorithms/graph/search.h	/^void dfs(graph& G, Vertex* start,$/;"	f
dfs_order	src/algorithms/graph/search.h	/^OutputIterator dfs_order(graph& G, OutputIterator dest) {$/;"	f
dijkstra_sssp	src/algorithms/graph/shortest_path.cpp	/^class dijkstra_sssp {$/;"	c	file:
dijkstra_sssp	src/algorithms/graph/shortest_path.cpp	/^dijkstra::dijkstra_sssp(graph& g, vertex& source) : G(g), src(source) {$/;"	f	class:dijkstra
directed_edge	src/containers/graph/edge.h	/^class directed_edge {$/;"	c
disjoint_sets	src/containers/disjoint_sets.h	/^		disjoint_sets() : elts(0) {}$/;"	f	class:disjoint_sets
disjoint_sets	src/containers/disjoint_sets.h	/^class disjoint_sets {$/;"	c
dist	src/algorithms/graph/shortest_path.cpp	/^		unordered_map<vertex, int> dist;$/;"	m	class:dijkstra_sssp	file:
dist_to	src/algorithms/graph/shortest_path.cpp	/^int dijkstra_sssp::dist_to(vertex& dest) {$/;"	f	class:dijkstra_sssp
edge	src/containers/graph/edge.h	/^class edge {$/;"	c
edges	src/containers/graph/undirected_graph.h	/^    std::set<Edge*> edges;$/;"	m	class:undirected_graph
eltid	src/containers/disjoint_sets.h	/^		map<elt_type, int> eltid;$/;"	m	class:disjoint_sets
elts	src/containers/disjoint_sets.h	/^		int elts;$/;"	m	class:disjoint_sets
eval_test	test/test.h	/^void Test::eval_test(bool expr, const std::string& exprStr, const std::string& fname, long lineno, std::string error_input) {$/;"	f	class:Test
failCount	test/test.h	/^		int failCount;$/;"	m	class:Test
find_set	src/containers/disjoint_sets.h	/^int disjoint_sets<elt_type>::find_set(elt_type e) {$/;"	f	class:disjoint_sets
func	test/algorithms/test_order_statistic.cpp	/^		it_type (*func)(it_type, it_type, int);$/;"	m	class:OrderStatisticTest	file:
func	test/algorithms/test_sort.cpp	/^	void (*func)(vector<int>::iterator first, vector<int>::iterator last);$/;"	m	class:SortTest	file:
func	test/algorithms/test_str_matching.cpp	/^    size_t (*func)(const string& text, const string& pattern);$/;"	m	class:StrMatchingTest	file:
func	test/algorithms/timer_sort.cpp	/^    void (*func)(typename Seq::iterator first, typename Seq::iterator last);$/;"	m	class:SortTimer	file:
gen	test/algorithms/test_sort.cpp	/^	DataGenerator<Seq> gen;$/;"	m	class:SortTest	file:
gen	test/algorithms/test_str_matching.cpp	/^    DataGenerator<string> gen;$/;"	m	class:StrMatchingTest	file:
gen	test/algorithms/timer_sort.cpp	/^    DataGenerator<Seq> gen;$/;"	m	class:SortTimer	file:
get_edges	src/containers/graph/undirected_graph.h	/^OutputIter undirected_graph::get_edges(OutputIter dest) const {$/;"	f	class:undirected_graph
get_name	test/containers/graph_test.cpp	/^    string get_name() {$/;"	f	class:Person
get_name	test/containers/new_graph_test.cpp	/^    string get_name() {$/;"	f	class:Person
get_status	test/test.h	/^int Test::get_status() {$/;"	f	class:Test
get_vertices	src/containers/graph/undirected_graph.h	/^OutputIter undirected_graph::get_vertices(OutputIter dest) const {$/;"	f	class:undirected_graph
graph	src/containers/graph/graph.h	/^class graph {$/;"	c
hash_code	test/containers/graph_test.cpp	/^    int hash_code() {$/;"	f	class:Friendship
hash_code	test/containers/graph_test.cpp	/^    size_t hash_code() {$/;"	f	class:Person
hash_code	test/containers/new_graph_test.cpp	/^    int hash_code() {$/;"	f	class:Friendship
hash_code	test/containers/new_graph_test.cpp	/^    size_t hash_code() {$/;"	f	class:Person
horspool	src/algorithms/str_matching.h	/^size_t horspool(const std::string& text, const std::string& pattern) {$/;"	f
indeg	src/containers/graph/undirected_graph.h	/^int undirected_graph::indeg(Vertex* v) {$/;"	f	class:undirected_graph
initial_vertex	test/containers/graph_test.cpp	/^    Vertex* initial_vertex() {$/;"	f	class:Friendship
initial_vertex	test/containers/new_graph_test.cpp	/^    Vertex* initial_vertex() {$/;"	f	class:Friendship
inv_eltid	src/containers/disjoint_sets.h	/^		map<int, elt_type> inv_eltid;$/;"	m	class:disjoint_sets
it_type	test/algorithms/test_order_statistic.cpp	/^		typedef typename Seq::iterator it_type;$/;"	t	class:OrderStatisticTest	file:
it_type	test/algorithms/test_sort.cpp	/^		typedef typename Seq::iterator it_type;$/;"	t	class:SortTest	file:
knapsack01	examples/knapsack.cpp	/^int knapsack01(BidirectionalIter in, int n, int capacity, OutputIter dest) {$/;"	f
knapsack01	examples/recursive_knapsack.cpp	/^int knapsack01(RandomAccessIter in, int n, int cap) {$/;"	f
kruskal_mst	src/algorithms/graph/mst.h	/^OutputIter kruskal_mst(graph& G, OutputIter res) { $/;"	f
main	examples/knapsack.cpp	/^int main() {$/;"	f
main	examples/recursive_knapsack.cpp	/^int main() {$/;"	f
main	examples/subset_sum.cpp	/^int main(int argc, char** argv) {$/;"	f
main	test/algorithms/test_order_statistic.cpp	/^int main() {$/;"	f
main	test/algorithms/test_sort.cpp	/^int main() {$/;"	f
main	test/algorithms/test_str_matching.cpp	/^int main() {$/;"	f
main	test/algorithms/timer_sort.cpp	/^int main() {$/;"	f
main	test/containers/disjoint_sets.cpp	/^int main() {$/;"	f
main	test/containers/graph_test.cpp	/^int main() {$/;"	f
main	test/containers/new_graph_test.cpp	/^int main() {$/;"	f
make_set	src/containers/disjoint_sets.h	/^void disjoint_sets<elt_type>::make_set(elt_type e) {$/;"	f	class:disjoint_sets
memo	examples/recursive_knapsack.cpp	/^int memo[100][100];$/;"	v
merge_sort	src/algorithms/sort.h	/^void merge_sort(RandomAccessIter _first, RandomAccessIter _last) {$/;"	f
merge_sort	src/multithreaded_algorithm/parallel_sort.h	/^void merge_sort(RandomAccessIter _first, RandomAccessIter _last) {$/;"	f
naive_str_matching	src/algorithms/str_matching.h	/^size_t naive_str_matching(const std::string& text, const std::string& pattern) {$/;"	f
name	test/containers/graph_test.cpp	/^    string name;$/;"	m	class:Person	file:
name	test/containers/new_graph_test.cpp	/^    string name;$/;"	m	class:Person	file:
no_of_vertices	src/containers/graph/undirected_graph.h	/^int undirected_graph::no_of_vertices() const {$/;"	f	class:undirected_graph
operator ()	src/containers/graph/graph.h	/^  		std::size_t operator()(Vertex* const& key) const{$/;"	f	struct:graph::Hasher
operator <	test/containers/graph_test.cpp	/^    bool operator<(Vertex* v) {$/;"	f	class:Person
operator <	test/containers/new_graph_test.cpp	/^    bool operator<(Vertex* v) {$/;"	f	class:Person
operator ==	test/containers/graph_test.cpp	/^    bool operator==(Vertex* v) {$/;"	f	class:Person
operator ==	test/containers/new_graph_test.cpp	/^    bool operator==(Vertex* v) {$/;"	f	class:Person
operator >	test/containers/graph_test.cpp	/^    bool operator>(Vertex* v) {$/;"	f	class:Person
operator >	test/containers/new_graph_test.cpp	/^    bool operator>(Vertex* v) {$/;"	f	class:Person
outdeg	src/containers/graph/undirected_graph.h	/^int undirected_graph::outdeg(Vertex* v) {$/;"	f	class:undirected_graph
p1	test/containers/graph_test.cpp	/^    Person* p1;$/;"	m	class:Friendship	file:
p1	test/containers/new_graph_test.cpp	/^    Person* p1;$/;"	m	class:Friendship	file:
p2	test/containers/graph_test.cpp	/^    Person* p2;$/;"	m	class:Friendship	file:
p2	test/containers/new_graph_test.cpp	/^    Person* p2;$/;"	m	class:Friendship	file:
parent	src/containers/disjoint_sets.h	/^		map<int, int> parent;$/;"	m	class:disjoint_sets
passCount	test/test.h	/^		int passCount;$/;"	m	class:Test
poly_hash	src/algorithms/str_matching.h	/^static long int poly_hash(const std::string& input, int m) {$/;"	f
quick_sort	src/algorithms/sort.h	/^void quick_sort(_RandomAccessIter _first, _RandomAccessIter _last) {$/;"	f
rabin_karp	src/algorithms/str_matching.h	/^size_t rabin_karp(const std::string& text, const std::string& pattern) {$/;"	f
random_data	test/data_generator.h	/^		Container random_data(int sz) {$/;"	f	class:DataGenerator
random_datum	test/data_generator.h	/^		val_type random_datum() {$/;"	f	class:DataGenerator
random_tests	test/algorithms/test_order_statistic.cpp	/^void OrderStatisticTest<Seq>::random_tests(int tst_cnt, int inp_sz) {$/;"	f	class:OrderStatisticTest
random_tests	test/algorithms/test_sort.cpp	/^void SortTest<Seq>::random_tests(int tst_cnt, int inp_sz) {$/;"	f	class:SortTest
randomized_partition	src/algorithms/sort.h	/^_RandomAccessIter randomized_partition(_RandomAccessIter _first, _RandomAccessIter _last) {$/;"	f
report	test/test.h	/^void Test::report() {$/;"	f	class:Test
run_custom_tests	test/algorithms/test_str_matching.cpp	/^void StrMatchingTest::run_custom_tests() {$/;"	f	class:StrMatchingTest
run_random_tests	test/algorithms/test_str_matching.cpp	/^void StrMatchingTest::run_random_tests() {$/;"	f	class:StrMatchingTest
run_tests	test/algorithms/test_order_statistic.cpp	/^void OrderStatisticTest<Seq>::run_tests() {$/;"	f	class:OrderStatisticTest
run_tests	test/algorithms/test_sort.cpp	/^void SortTest<Seq>::run_tests() {$/;"	f	class:SortTest
run_tests	test/algorithms/test_str_matching.cpp	/^void StrMatchingTest::run_tests() {$/;"	f	class:StrMatchingTest
select_i	src/algorithms/order_statistic.h	/^RandomAccessIter select_i(RandomAccessIter _first, RandomAccessIter _last, int i) {$/;"	f
selection_sort	src/algorithms/sort.h	/^void selection_sort(_RandomAccessIter _first, _RandomAccessIter _last) {$/;"	f
sprint	test/utils.h	/^std::string sprint(_ForwardIterator first, _ForwardIterator last) {$/;"	f
src	src/algorithms/graph/shortest_path.cpp	/^		vertex& src;$/;"	m	class:dijkstra_sssp	file:
start	test/timer.h	/^void Timer::start() {$/;"	f	class:Timer
status	test/test.h	/^		int status;	\/\/ pass or fail?$/;"	m	class:Test
stop	test/timer.h	/^void Timer::stop() {$/;"	f	class:Timer
t	test/algorithms/timer_sort.cpp	/^    Timer t;$/;"	m	class:SortTimer	file:
terminal_vertex	test/containers/graph_test.cpp	/^    Vertex* terminal_vertex() {$/;"	f	class:Friendship
terminal_vertex	test/containers/new_graph_test.cpp	/^    Vertex* terminal_vertex() {$/;"	f	class:Friendship
time	test/algorithms/timer_sort.cpp	/^float SortTimer<Seq>::time(int inp_sz, int runs) {$/;"	f	class:SortTimer
time_elapsed	test/timer.h	/^float Timer::time_elapsed() {$/;"	f	class:Timer
topological_sort	src/algorithms/graph/graph_algo.h	/^OutputIter topological_sort(UndirectedGraph& G, OutputIter dest) {$/;"	f
total_vertices	src/containers/graph/undirected_graph.h	/^    int total_vertices;$/;"	m	class:undirected_graph
undirected_graph	src/containers/graph/undirected_graph.h	/^class undirected_graph : public graph {$/;"	c
undirected_graph	src/containers/graph/undirected_graph.h	/^undirected_graph::undirected_graph() {$/;"	f	class:undirected_graph
unite	src/containers/disjoint_sets.h	/^void disjoint_sets<elt_type>::unite(elt_type e1, elt_type e2) {$/;"	f	class:disjoint_sets
val_type	test/data_generator.h	/^		typedef typename Container::value_type val_type;$/;"	t	class:DataGenerator
verbose	test/test.h	/^		bool verbose;$/;"	m	class:Test
vertex	src/containers/graph/vertex.h	/^class vertex {$/;"	c
vertices	src/containers/graph/undirected_graph.h	/^    std::set<Vertex*> vertices;$/;"	m	class:undirected_graph
weighted_directed_edge	src/containers/graph/edge.h	/^class weighted_directed_edge : public directed_edge {$/;"	c
weighted_edge	src/containers/graph/edge.h	/^class weighted_edge : public edge {$/;"	c
